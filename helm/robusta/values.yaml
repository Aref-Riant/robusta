# global parameters
clusterName: ""

# slack integration params
slackApiKey: ""
slackChannel: ""

# robusta ui integration params
robustaApiKey: ""

# playbook configuration
playbooks:
- triggers:
  - on_prometheus_alert:
      alert_name: Watchdog
  actions:
  - severity_silencer: {}
- triggers:
  - on_pod_update: {}
  actions:
  - restart_loop_reporter:
      restart_reason: CrashLoopBackOff
- triggers:
  - on_prometheus_alert:
      alert_name: KubeNodeNotReady
  actions:
  - node_allocatable_resources_enricher: {}
  - node_running_pods_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDaemonsetMisscheduled
  actions:
  - daemonset_enricher: {}
  - daemonset_misscheduled_analysis_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostHighCpuLoad
  actions:
  - node_cpu_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: HostOomKillDetected
  actions:
  - oom_killer_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: CPUThrottlingHigh
  actions:
  - cpu_throttling_analysis_enricher: {}
  - graph_enricher: {}
- triggers:
  - on_prometheus_alert:
      alert_name: KubernetesDeploymentReplicasMismatch
  actions:
  - deployment_status_enricher: {}
- triggers:
  - on_prometheus_alert: {}
  actions:
  - default_enricher: {}

# parameters for the robusta forwarder deployment
kubewatch:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/kubewatch:v1.11
  pprof: True
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the renderer service used in robusta runner to render grafana graphs
grafanaRenderer:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/grafana-renderer:5
  resources:
    requests:
      memory: 512Mi
    limits:
      cpu: ~

# parameters for the robusta runner
runner:
  image: us-central1-docker.pkg.dev/genuine-flight-317411/devel/robusta-runner:0.6.8-dirty
  log_level: INFO
  resources:
    requests:
      memory: 1024Mi
    limits:
      cpu: ~

# parameters for the vector installation we use for log-triggers
vector:
  commonLabels:
    robustaComponent: vector
  nameOverride: "robusta-vector"
  podRollmeAnnotation: true
  # Set this to non-empty value to use existing `ConfigMap` for `vector`, instead
  # of using a generated one.
  existingConfigMap: ""
  customConfig:
    sources:
      kubernetes_logs:
        type: kubernetes_logs
    transforms:
      # we forbid analyzing robusta's logs to avoid infinite logging loops where we pickup the text
      # we want to search for in robusta's log and send it for processing infinitely
      # TODO: best to do this with a kubernetes label, as the image name could change more easily
      kubernetes_logs_without_robusta:
        type: filter
        inputs: [ "kubernetes_logs" ]
        condition: "!contains!(.kubernetes.container_image, \"robusta-runner\")"

      filter1:
        type: filter
        inputs: [ "kubernetes_logs_without_robusta" ]
        condition: contains!(.message, "unary")

    sinks:
      console_sink:
        type: console
        inputs: [ "filter1" ]
        target: "stdout"
        encoding:
          codec: "json"
      my_sink_id:
        type: http
        inputs: [ "filter1" ]
        uri: http://robusta-runner.default.svc.cluster.local/api/vector
        encoding:
          codec: "json"
