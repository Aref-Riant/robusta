sources:
  kubernetes_logs:
    type: kubernetes_logs
transforms:
  # we don't analyze robusta's logs to avoid infinite logging loops where we pickup the text
  # we want to search for in robusta's log and send it for processing back to robusta where it appears in the log again
  # TODO: it would be cleaner to do this with:
  # https://vector.dev/docs/reference/configuration/sources/kubernetes_logs/#extra_label_selector
  # don't use the "vector.dev/exclude" annotation because if someone is running their own vector in-cluster
  # then we don't want it to ignore the robusta logs
  kubernetes_logs_without_robusta:
    type: filter
    inputs: [ "kubernetes_logs" ]
    condition: "!contains!(.kubernetes.container_image, \"robusta-runner\")"
  {% for trigger in log_triggers %}
  filter{{loop.index}}:
    type: filter
    inputs: [ "kubernetes_logs_without_robusta" ]
    condition: contains!(.message, "{{trigger.substring}}") # TODO: fix escaping
  {% endfor %}

sinks:
  #console_sink:
  #  type: console
  #  inputs: [ {% for trigger in log_triggers %} "filter{{loop.index}}", {%endfor%} ]
  #  target: "stdout"
  #  encoding:
  #    codec: "json"
  robusta_sink:
    type: http
    inputs: [ {% for trigger in log_triggers %} "filter{{loop.index}}", {%endfor%} ]
    uri: http://robusta-runner.default.svc.cluster.local/api/vector
    encoding:
      codec: "json"